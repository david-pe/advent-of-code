// import 'basad';
import { solve, solve_2 } from './day-10';
import inputLoader from '../../input-loader';

const split = input =>
  input
    .split('\n')
    .map(x => x.trim())
    .map(x => x.split(''));

describe('Day 10', () => {
  describe('Part 1', () => {
    it('solves example 1', () => {
      expect(
        solve(
          split(`.#..#
      .....
      #####
      ....#
      ...##
      `),
        ),
      ).toEqual(8);
    });

    it('solves example 2', () => {
      expect(
        solve(
          split(`......#.#.
          #..#.#....
          ..#######.
          .#.#.###..
          .#..#.....
          ..#....#.#
          #..#....#.
          .##.#..###
          ##...#..#.
          .#....####`),
        ),
      ).toEqual(33);
    });

    it('solves example 3', () => {
      expect(
        solve(
          split(`#.#...#.#.
          .###....#.
          .#....#...
          ##.#.#.#.#
          ....#.#.#.
          .##..###.#
          ..#...##..
          ..##....##
          ......#...
          .####.###.`),
        ),
      ).toEqual(35);
    });

    it('solves example 4', () => {
      expect(
        solve(
          split(`.#..#..###
          ####.###.#
          ....###.#.
          ..###.##.#
          ##.##.#.#.
          ....###..#
          ..#.#..#.#
          #..#.#.###
          .##...##.#
          .....#.#..`),
        ),
      ).toEqual(41);
    });

    it('solves example 5', () => {
      expect(
        solve(
          split(`.#..##.###...#######
          ##.############..##.
          .#.######.########.#
          .###.#######.####.#.
          #####.##.#.##.###.##
          ..#####..#.#########
          ####################
          #.####....###.#.#.##
          ##.#################
          #####.##.###..####..
          ..######..##.#######
          ####.##.####...##..#
          .#####..#.######.###
          ##...#.##########...
          #.##########.#######
          .####.#.###.###.#.##
          ....##.##.###..#####
          .#.#.###########.###
          #.#.#.#####.####.###
          ###.##.####.##.#..##`),
        ),
      ).toEqual(210);
    });

    it('solves the input', () => {
      expect(solve(split(inputLoader('./input.txt')))).toBe(329);
    });
  });

  describe('Part 2', () => {
    it('solves example 5', () => {
      expect(
        solve_2(
          split(`.#..##.###...#######
          ##.############..##.
          .#.######.########.#
          .###.#######.####.#.
          #####.##.#.##.###.##
          ..#####..#.#########
          ####################
          #.####....###.#.#.##
          ##.#################
          #####.##.###..####..
          ..######..##.#######
          ####.##.####...##..#
          .#####..#.######.###
          ##...#.##########...
          #.##########.#######
          .####.#.###.###.#.##
          ....##.##.###..#####
          .#.#.###########.###
          #.#.#.#####.####.###
          ###.##.####.##.#..##`),
        ),
      ).toEqual(802);
    });

    it('solves the input', () => {
      expect(solve_2(split(inputLoader('./input.txt')))).toBe(512);
    });
  });
});
